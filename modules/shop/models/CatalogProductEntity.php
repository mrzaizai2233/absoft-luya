<?php

namespace app\modules\shop\models;

use Yii;
use yii\db\Exception;

/**
 * This is the model class for table "{{%catalog_product_entity}}".
 *
 * @property int $entity_id Entity ID
 * @property int $attribute_set_id Attribute Set ID
 * @property string $type_id Type ID
 * @property string $sku SKU
 * @property int $has_options Has Options
 * @property int $required_options Required Options
 * @property string $created_at Creation Time
 * @property string $updated_at Update Time
 *
 * @property EavAttributeSet $attributeSet
 * @property CatalogProductEntityDatetime[] $catalogProductEntityDatetimes
 * @property CatalogProductEntityDecimal[] $catalogProductEntityDecimals
 * @property CatalogProductEntityText[] $catalogProductEntityTexts
 * @property CatalogProductEntityVarchar[] $catalogProductEntityVarchars
 */
class CatalogProductEntity extends \yii\db\ActiveRecord
{
    const SKU_CODE = 'sku';

    const EAV_ENTITY_TYPE_ID = 4;

    const DEFAULT_ATTRIBUTES = [ 'entity_id' , 'attribute_set_id' , 'type_id' , 'created_at' , 'updated_at' , 'sku' ];

    const DEFUALT_ATTRIBUTE_SET = 1;

    public $eav_attributes;

    public $store_id;

    public $entity_table = 'catalog_product_entity';
    /**
     * {@inheritdoc}
     */
    public static function tableName ()
    {
        return "{{%catalog_product_entity}}";
    }

    /**
     * {@inheritdoc}
     */
    public function rules ()
    {
        return [
            [ [ 'attribute_set_id' , 'has_options' , 'required_options' ] , 'integer' ] ,
            [ [ 'created_at' , 'updated_at' ] , 'safe' ] ,
            [ [ 'type_id' ] , 'string' , 'max' => 32 ] ,
            [ [ 'sku' ] , 'string' , 'max' => 64 ] ,
            [ [ 'attribute_set_id' ] , 'exist' , 'skipOnError' => true , 'targetClass' => EavAttributeSet::className() , 'targetAttribute' => [ 'attribute_set_id' => 'attribute_set_id' ] ] ,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels ()
    {
        return [
            'entity_id' => Yii::t( 'app' , 'Entity ID' ) ,
            'attribute_set_id' => Yii::t( 'app' , 'Attribute Set ID' ) ,
            'type_id' => Yii::t( 'app' , 'Type ID' ) ,
            'sku' => Yii::t( 'app' , 'SKU' ) ,
            'has_options' => Yii::t( 'app' , 'Has Options' ) ,
            'required_options' => Yii::t( 'app' , 'Required Options' ) ,
            'created_at' => Yii::t( 'app' , 'Creation Time' ) ,
            'updated_at' => Yii::t( 'app' , 'Update Time' ) ,
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAttributeSet ()
    {
        return $this->hasOne( EavAttributeSet::className() , [ 'attribute_set_id' => 'attribute_set_id' ] );
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCatalogProductEntityDatetimes ()
    {
        return $this->hasMany( CatalogProductEntityDatetime::className() , [ 'entity_id' => 'entity_id' ] );
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCatalogProductEntityDecimals ()
    {
        return $this->hasMany( CatalogProductEntityDecimal::className() , [ 'entity_id' => 'entity_id' ] );
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCatalogProductEntityTexts ()
    {
        return $this->hasMany( CatalogProductEntityText::className() , [ 'entity_id' => 'entity_id' ] );
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCatalogProductEntityVarchars ()
    {
        return $this->hasMany( CatalogProductEntityVarchar::className() , [ 'entity_id' => 'entity_id' ] );
    }

    public function getAllEavAttributes ()
    {
        $eavEnityAttributes = EavEntityAttribute::find()
            ->select( '*' )
            ->innerJoin( 'eav_attribute_set' , 'eav_attribute_set.attribute_set_id = eav_entity_attribute.attribute_set_id' )
            ->innerJoin( 'eav_attribute_group' , 'eav_attribute_group.attribute_group_id = eav_entity_attribute.attribute_group_id' )
            ->innerJoin( 'eav_attribute' , 'eav_attribute.attribute_id = eav_entity_attribute.attribute_id' )->all();
    }

    public function afterSave ( $insert , $changedAttributes )
    {
//        foreach ($this->eav_attributes as $attribute_code => $attribute_value) {
//
//            $attribute = EavAttribute::findOne(['attribute_code'=>$attribute_code,'entity_type_id'=>CatalogProductEntity::EAV_ENTITY_TYPE_ID]);
//            $attribute->saveAttributeValue($this->entity_id,$attribute_value,null);
//        }
        if($insert){
            $this->saveEavAttributes();
        } else {

        }
        parent::afterSave( $insert , $changedAttributes ); // TODO: Change the autogenerated stub
    }

    public function getEntityAttributes(){

    }


    /**
     * @throws Exception
     */
    public function saveEavAttributes ()
    {

        $eavEnityAttributes = EavAttribute::getEntityAttributeByCodes(array_keys($this->eav_attributes),self::EAV_ENTITY_TYPE_ID);

        $_preAttributeToSaves = [];
        foreach ($this->eav_attributes as $eav_attribute_code => $eav_attribute_value) {
            foreach ($eavEnityAttributes as $index => $eavEnityAttribute) {
                if ($eavEnityAttribute->attribute_code == $eav_attribute_code) {
                    $_preAttributeToSaves[ $eavEnityAttribute->backend_type ][ $eavEnityAttribute->attribute_id ] = $eav_attribute_value;
                    unset($eavEnityAttributes[$index]);
                }
            }
        }

        $attributeToSaves = [];
        foreach ($_preAttributeToSaves as $type => $preAttributeToSave) {
            foreach ($preAttributeToSave as $attribute_id => $value) {
                $attributeToSaves[$type][]=[
                    'attribute_id'=>$attribute_id,
                    'entity_id'=>$this->entity_id,
                    'store_id'=>$this->store_id,
                    'value'=>$value
                ];
            }
        }
        $connection = Yii::$app->getDb();
        $transection = $connection->beginTransaction();
        try {
            foreach ($attributeToSaves as $type => $attributeToSave) {
                $connection->createCommand()
                    ->batchInsert(
                        $this->entity_table.'_'.$type,
                        [ 'attribute_id','entity_id','store_id','value'],
                        $attributeToSave
                    )->execute();
            }
            $transection->commit();
        } catch (Exception $e){
            $transection->rollBack();
            Yii::$app->getSession()->setFlash('error',Yii::t('app','Add product faild'));
        }

    }

    public function updateEavAttributes(){
        $eavEnityAttributes = EavAttribute::getEntityAttributeByCodes(array_keys($this->eav_attributes),self::EAV_ENTITY_TYPE_ID);

    }
}

